#include <iostream>
#include <queue>
#include <algorithm>

using namespace std;

int main() {

	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int T, N, M, X;
	queue <int> q;
	int list[101]; // 중요도를 크기순으로 배열하기 위해 생성
	int cnt = 0; // 찾고자 하는 중요도보다 큰 숫자의 개수
	int cnt2 = 0; // 찾고자 하는 중요도가 몇번 반복해서 나왔는지 ->> 찾고자 하는 중요도가 중복하여 존재할 때, 맨 처음 찾고자 하는 위치가 몇번째에 있는지 확인하기 위해 카운트
  int a,c;
	int b = 0;
	cin >> T;

	for (int i = 0; i < T; i++) {
		cin >> N >> M;
		q = queue<int>();
		cnt = 0;
		cnt2 = 0;
		b = 0;
		for (int j = 0; j < N; j++) {
			cin >> X;	
			q.push(X);
			list[j] = X;
		}
		a = list[M]; // 찾고자 하는 중요도 값
		for (int j = 0; j < N; j++) {
			if (list[j] == a) {
				b++; // 찾고자 하는 중요도가 중복하여 존재하는 개수
				if (j == M) {
					c = b; // 중복되는 a 중에서 찾고자 하는건 몇번째에 존재하는지
				}
			}
		}
		sort(list, list + 101,greater<>()); // 중요도가 높은 순으로 배열
		int k = 0;
		while (1) {
			if (list[k] == a) {
				cnt2 %= b; // b의 배수는 어차피 한 바퀴라 배치가 변하지 않음 
				c -= cnt2; // 뒤로 cnt2 만큼 이동 했을 것임
				if (c < 0) {
					c += b; // index가 0보다 앞으로 가는 경우 뒤로 순환되기 때문에 + b
				}
				else if (c == 0) {
					c += cnt2; // index가 0 이 되는 경우는 변한게 없기 때문에 맨 처음 c값 유지
				}
				cout <<cnt+c<< '\n';
				break;
			}
			if (q.front() == list[k]) {
				cnt++; // 찾고자 하는 중요도보다 큰 중요도의 개수 
				k++; // 몇번째로 높은 중요도를 확인하고 있는지
				q.pop();
			}
			else {
				q.push(q.front());
				q.pop();
			}
			if (q.front() == a) {
				cnt2++;
			}
		}
	}
}

예제를 몇개 넣어 본 결과 모두 정답이 나오지만... 
시간 초과가 발생하는데, 해결을 하지 못했습니다 ㅜㅜ 
